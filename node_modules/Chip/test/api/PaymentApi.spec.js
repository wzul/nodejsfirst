var config = require('../../superagent-mock-config');
import superagent from 'superagent';
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PublicRestApi);
  }
}(this, function(expect, PublicRestApi) {
  'use strict';

  var instance;
  var uuid = '0afa3ecc-1f72-4aec-a06b-68bf1986e5f1';

  beforeEach(function() {
    instance = new PublicRestApi.default.PaymentApi();
    PublicRestApi.default.ApiClient.instance.basePath = "https://gate.chip-in.asia/api/v1/";
    require('superagent-mock')(superagent, config);
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PurchasesApi', function() {
    describe('purchasesCancel', function() {
      it('should call purchasesCancel successfully', function(done) {
        instance.purchasesCancel(uuid, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/cancel/`)
          done()
        })
      });
    });
    describe('purchasesCapture', function() {
      it('should call purchasesCapture without amount successfully', function(done) {
        instance.purchasesCapture(uuid, null, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.params).to.be.empty()
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/capture/`)
          done()
        })
      });
      it('should call purchasesCapture with amount successfully', function(done) {
        instance.purchasesCapture(uuid, 123, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.params).to.have.property('amount')
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/capture/`)
          done()
        })
      });
    });
    describe('purchasesCharge', function() {
      it('should call purchasesCharge successfully', function(done) {
        instance.purchasesCharge(uuid, uuid, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.params).to.have.property('recurring_token', uuid)
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/charge/`)
          done()
        })
      })
    });
    describe('purchasesCreate', function() {
      it('should call purchasesCreate successfully', function(done) {
        let client = new PublicRestApi.default.ClientDetails("test@test.com");
        let product = new PublicRestApi.default.Product("Test", 100);
        let details = new PublicRestApi.default.PurchaseDetails([product]);
        let purchase = new PublicRestApi.default.Purchase();
        purchase.brand_id = uuid;
        purchase.client = client;
        purchase.purchase = details;
        instance.purchasesCreate(purchase, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.match[0]).to.contain(`/purchases/`)
          done()
        })
      });
    });
    describe('purchasesDeleteRecurringToken', function() {
      it('should call purchasesDeleteRecurringToken successfully', function(done) {
        instance.purchasesDeleteRecurringToken(uuid, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/delete_recurring_token/`)
          done()
        })
      });
    });
    describe('purchasesRead', function() {
      it('should call purchasesRead successfully', function(done) {
        instance.purchasesRead(uuid, function(error, data, response){
          expect(response.body.context.method).to.be('get')
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/`)
          done()
        })
      });
    });
    describe('purchasesRefund', function() {
      it('should call purchasesRefund without amount successfully', function(done) {
        instance.purchasesRefund(uuid, null, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.params).to.be.empty()
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/refund/`)
          done()
        })
      });
      it('should call purchasesRefund with amount successfully', function(done) {
        instance.purchasesRefund(uuid, uuid, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.params).to.have.property('amount')
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/refund/`)
          done()
        })
      });
    });
    describe('purchasesRelease', function() {
      it('should call purchasesRelease successfully', function(done) {
        instance.purchasesRelease(uuid, function(error, data, response){
          expect(response.body.context.method).to.be('post')
          expect(response.body.match[0]).to.contain(`/purchases/${uuid}/release/`)
          done()
        })
      });
    });
    describe('paymentMethods', function() {
      it('should call paymentMethods successfully', function(done) {
        const currency = "USD";
        instance.paymentMethods(uuid, currency, null, function(error, data, response){
          expect(response.body.context.method).to.be('get')
          expect(response.body.match[0]).to.contain(`/payment_methods/?brand_id=${uuid}&currency=${currency}`)
          done()
        })
      });
    });
    describe('verify', function() {
      it('should call verify successfully', function(done) {
        const content = '{"id": "", "due": 1642060235, "type": "purchase", "client": {"cc": [], "bcc": [], "city": "", "email": "", "phone": "", "country": "", "zip_code": "", "bank_code": "", "full_name": "", "brand_name": "", "legal_name": "", "tax_number": "", "client_type": null, "bank_account": "", "personal_code": "", "shipping_city": "", "street_address": "", "shipping_country": "", "shipping_zip_code": "", "registration_number": "", "shipping_street_address": ""}, "issued": "", "status": "created", "is_test": true, "payment": null, "product": "purchases", "user_id": null, "brand_id": "", "order_id": null, "platform": "api", "purchase": {"debt": 0, "notes": "", "total": 100, "currency": "EUR", "language": "en", "products": [{"name": "test", "price": 100, "category": "", "discount": 0, "quantity": "1.0000", "tax_percent": "0.00"}], "timezone": "UTC", "due_strict": false, "email_message": "", "total_override": null, "shipping_options": [], "subtotal_override": null, "total_tax_override": null, "payment_method_details": {}, "request_client_details": [], "total_discount_override": null}, "client_id": null, "reference": "", "viewed_on": null, "company_id": "", "created_on": 1642056635, "event_type": "purchase.created", "updated_on": 1642056635, "invoice_url": null, "checkout_url": "", "send_receipt": false, "skip_capture": false, "creator_agent": "", "issuer_details": {"website": "", "brand_name": "", "legal_city": "", "legal_name": "", "tax_number": "", "bank_accounts": [{"bank_code": "", "bank_account": ""}], "legal_country": "", "legal_zip_code": "", "registration_number": "", "legal_street_address": ""}, "marked_as_paid": false, "status_history": [{"status": "created", "timestamp": 1642056635}], "cancel_redirect": "", "created_from_ip": "", "direct_post_url": null, "force_recurring": false, "recurring_token": null, "failure_redirect": "", "success_callback": "", "success_redirect": "", "transaction_data": {"flow": "payform", "extra": {}, "country": "", "attempts": [], "payment_method": ""}, "refundable_amount": 0, "is_recurring_token": false, "billing_template_id": null, "currency_conversion": null, "reference_generated": "", "refund_availability": "none", "payment_method_whitelist": null}';
        const signature = 'dHgVBR7qLldrgjMAM0exDnDIBsUU0ZpQC4lkPhAjmjZjkFlRoIYcaC4fR03avykxujZwakM1mGjvInFvCHE8zrrUemeJhHSHN+8n54zecQQ0U84JhdDufr0bSXvSduaqLW1cbBEOHKXm4UCVkMp3bRKzPGEYLM0L6PYd00x3yY53gDeOm05HWlXb5UG8hpKHJPhhr5S58r+hStlM0yAI7tkeTTy6neIin7WKS8imeiGGRh6n46mXEtIcwMzmOaRmQ7me3GAxvD8gDEPY6JV6r3eQZpTF7iX/rU0pod0P35XTvQ3pO2HMBCeRm5zfFCva9JGEVvtiJ1ZDZO/4/UfPEQ==';
        const publicKey = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArzedRaG/aa191+f3/Syf\nye4lbwaVDngwBpsV/JidZ3T/27oEAPtwZ3oqhmhsBQcVB/f94ecFdj49NTG1DZZN\nfkWjSZEViL22oEGBryK2MjkUrW30kY1Yh0vCa/e0nIG/+9b1TLfzHIwjm54hw1R/\nRi/m/tf1nLMEm06ogDNV/AUyg6uyNLqp21NxKP7+xV6yfPkfX1s+qSjciyCPzO6r\n+TsG3GTqopG1FSaWx+R0+bmsOEmV5YQKMUlLKlf0wJUD7mjsNioFomEp5QBpASbE\nLfNDO13L5FiUgLtWcz+ZazCZmNUdhstLvrEVt8NhvPWBy96YWm4GfXx7xr8F11yH\npQIDAQAB\n-----END PUBLIC KEY-----";
        const result = instance.verify(content, Buffer.from(signature, 'base64'), publicKey);
        expect(result).to.be(true);
        done()
      });
    });
  });

}));
